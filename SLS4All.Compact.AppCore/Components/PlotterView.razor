@inherits AppComponent
@using SLS4All.Compact.Camera;
@using SLS4All.Compact.ComponentModel
@using SLS4All.Compact.IO
@using SLS4All.Compact.Slicing;
@using SLS4All.Compact.Temperature;
@using System.Text
@using System.Buffers.Text
@using SLS4All.Compact.Threading
@using System.Diagnostics
@using System.Globalization
@inject IJSRuntime JSRuntime
@inject ICodePlotter Plotter
@inject ImageStreamingHelper ImageStreamingHelper

<div @ref="@ElementRef" id="@ElementId" class="d-flex flex-column plotter-view @ClassNames" style="@StyleNames" @attributes="@AttributesWithCssScope">
    <div class="plotter-image-container" @attributes="@JustAttributesWithCssScope">
        <img id="@_id" @key="_streamKey" class="plotter-image" src="@StreamUri" @attributes="@JustAttributesWithCssScope" />
    </div>
</div>

@code {
    public const string CssScope = "b-plotter-view";
    private readonly object _streamKey = new();
    private readonly string _id = Guid.NewGuid().ToString();
    private Timer _timer;
    private const int _timerPeriod = 500;
    private ImageStreamingHandle? _streamHandle;
    private long _streamCounter;

    private string StreamUri
        => string.Create(CultureInfo.InvariantCulture, $"/api/PlottedImage/{_id}?c={_streamCounter}");

    public PlotterView()
    {
        _timer = new Timer(OnTimer);
    }

    private bool TryRegisterImageReady()
    {
        if (_streamHandle == null)
            _streamHandle = new ImageStreamingHandle(JSRuntime, ImageStreamingHelper, _id, () =>
            {
                _streamCounter++;
                return StreamUri;
            });
        return _streamHandle.TryRegisterImageReady();
    }

    private void TryUnregisterImageReady()
    {
        _streamHandle?.TryUnregisterImageReady();
    }

    private void OnTimer(object? state)
    {
        TryInvokeStateHasChanged(() =>
        {
            TryRegisterImageReady();
            return ValueTask.FromResult(true);
        });
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
            _timer.Change(0, _timerPeriod);
    }

    public override async ValueTask DisposeAsync()
    {
        TryUnregisterImageReady();
        _timer.Dispose();
        await base.DisposeAsync();
    }
}
