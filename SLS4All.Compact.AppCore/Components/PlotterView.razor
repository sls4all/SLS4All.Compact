@inherits AppComponent
@using SLS4All.Compact.Camera;
@using SLS4All.Compact.ComponentModel
@using SLS4All.Compact.IO
@using SLS4All.Compact.Slicing;
@using SLS4All.Compact.Temperature;
@using System.Text
@using System.Buffers.Text
@using SLS4All.Compact.Threading
@using System.Diagnostics
@using System.Globalization
@inject IJSRuntime JSRuntime
@inject ICodePlotter Plotter

<div @ref="@ElementRef" id="@ElementId" class="d-flex flex-column plotter-view @ClassNames" style="@StyleNames" @attributes="@AttributesWithCssScope">
    <div class="plotter-image-container" @attributes="@JustAttributesWithCssScope">
        <img id="@_id" @key="_streamKey" class="plotter-image" src="@PlotterImageUri" @attributes="@JustAttributesWithCssScope" />
    </div>
</div>

@code {
    public const string CssScope = "b-plotter-view";
    private readonly object _streamKey = new();
    private readonly string _id = Guid.NewGuid().ToString();
    private Timer _timer;
    private readonly static TimeSpan s_period = TimeSpan.FromSeconds(0.5);

    private string PlotterImageUri
        => string.Create(CultureInfo.InvariantCulture, $"/api/PlottedImage/{Plotter.Version}?age={s_period.TotalSeconds}&maxsize={MaxSize}");

    [Parameter]
    public int? MaxSize { get; set; }

    public PlotterView()
    {
        _timer = new Timer(OnTimer);
    }

    private void OnTimer(object? state)
    {
        TryInvokeStateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
            _timer.Change(TimeSpan.Zero, s_period);
    }

    public override async ValueTask DisposeAsync()
    {
        _timer.Dispose();
        await base.DisposeAsync();
    }
}
