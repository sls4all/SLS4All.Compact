@using SLS4All.Compact.Graphics;
@inherits AppComponent
@inject NavigationManager NavigationManager

<button type="button" @ref="@ElementRef" id="@ElementId" class="container main-button @(!IsEnabled ? "disabled-button" : "") @ClassNames" style="@StyleNames" @attributes="@AttributesWithCssScope" oncontextmenu="return false;" @onclick="OnClickHandler">
    @if (Image != null)
    {
        var image = IsSelected ? (SelectedImage ?? Image) : Image;
        var color = IsSelected ? (SelectedColor ?? Color) : Color;
        var imageStyle = !string.IsNullOrWhiteSpace(color) ? "filter: " + new RgbaF(color).GetCssColorizeFilter() : "";
        <div class="row justify-content-center" @attributes="@JustAttributesWithCssScope">
            <div class="col-auto" @attributes="@JustAttributesWithCssScope">
                <img src="@image" draggable="false" style="@($"{imageStyle}; {ImageStyle}")" class="@($"img-fluid {ImageClass}")" @attributes="@JustAttributesWithCssScope" />
            </div>
        </div>
    }
    @if (Title != null || ChildContent != null)
    {
        var color = IsSelected ? (SelectedColor ?? Color) : Color;
        <div class="row justify-content-center py-2 title-row" @attributes="@JustAttributesWithCssScope">
            <div class="col-auto" style="color: @color" @attributes="@JustAttributesWithCssScope">
                @if (ChildContent != null)
                {
                    @ChildContent
                }
                else
                {
                    @Title
                }
            </div>
        </div>
    }
</button>

@code {
    [Parameter]
    public string? Image { get; set; }

    [Parameter]
    public string? ImageStyle { get; set; }

    [Parameter]
    public string? ImageClass { get; set; }

    [Parameter]
    public string? SelectedImage { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool IsSelected { get; set; } = false;

    [Parameter]
    public string? Target { get; set; } = null;

    [Parameter]
    public EventCallback OnClick { get; set; }

    [Parameter]
    public bool IsEnabled { get; set; } = true;

    [Parameter]
    public string? Color { get; set; }

    [Parameter]
    public string? SelectedColor { get; set; }

    private async Task OnClickHandler()
    {
        await ElementRef.TryFocusAsync();
        if (OnClick.HasDelegate)
            await OnClick.InvokeAsync();
        else if (Target != null)
            NavigationManager.NavigateTo(Target);
    }
}
