@page "/wizard/print"
@page "/wizard/print/{FixedStepName}"
@using System.Diagnostics
@using Microsoft.Extensions.Options
@using SLS4All.Compact.Camera
@using SLS4All.Compact.Diagnostics
@using SLS4All.Compact.IO
@using SLS4All.Compact.Movement
@using SLS4All.Compact.Nesting
@using SLS4All.Compact.Power
@using SLS4All.Compact.ComponentModel
@using SLS4All.Compact.Printer
@using SLS4All.Compact.Printing
@using SLS4All.Compact.Processing.Meshes
@using SLS4All.Compact.Scripts
@using SLS4All.Compact.Slicing
@using SLS4All.Compact.Storage.PrintJobs
@using SLS4All.Compact.Storage.PrintProfiles
@using SLS4All.Compact.Storage.PrinterSettings
@using SLS4All.Compact.Temperature
@using SLS4All.Compact.Validation
@using SLS4All.Compact.Numerics
@inherits WizardBase<PrintWizard.Step>
@inject IToastProvider ToastProvider
@inject IPrintingService PrintingGlobal
@inject IPrintingServiceScoped SlicingPreview
@inject ILayerClient LayerClient
@inject ICurrentPrintingParamsProvider PrintingParamsProvider
@inject IPrintProfileStorage ProfileStorage
@inject IHalogenHeaterChecker HalogenHeaterChecker
@inject IChamberHeaterChecker ChamberHeaterChecker
@inject IPrintSessionStorage PrintSessionStorage
@inject IBedProjection Projection
@inject IJSRuntime JSRuntime
@inject IInputClient InputClient
@inject IPrinterClient PrinterClient

@{
    if (!CanContinueIfNotPrinting(__builder))
        return;
    base.BuildRenderTree(__builder);

    var isSafeButtonOn = InputClient.CurrentState.TryGetEntry(InputClient.SafeButtonId, out var state) && state.Value;
    var needsLaser = _params?.Job?.NeedsLaser == true;
}

<PrinterPageTitle Image="/_content/SLS4All.Compact.AppCore/ui/img/main-new-job.png" IsFullPage="true" />

<CancelModal @ref="_halogenCheckModal" ShowSpinner="false" ExternalCssScope="@CssScope">
    <Body>
        <VideoCameraView @key="_halogenCameraViewKey" class="halogen-camera-view" ExternalCssScope="@CssScope" LightsControlsEnabled="false" />
    </Body>
</CancelModal>

<ModalWrapper @ref="_skipToEnd" class="app-modal" Context="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">
                Skip to the end
            </h5>
        </div>
        <div class="modal-body">
            Are you <b>really</b> sure you want to skip <b>all the steps neccessary to prepare the printer</b>. The printer might be damaged!
        </div>
        <div class="modal-footer">
            @if (!_doubleConfirmed)
            {
                <button @onclick="() => _doubleConfirmed = true" class="btn btn-danger">Skip to the end</button>
            }
            else
            {
                <button @onclick="() => SkipToEnd(true)" class="btn btn-danger" style="font-weight: bold">Really skip to the end!</button>
            }
            <button @onclick="() => modal.Close()" class="btn btn-secondary">Stay at this step</button>
        </div>
    </div>
</ModalWrapper>

<ModalWrapper @ref="_skipHoming" class="app-modal" Context="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">
                Skip homing and motor check?
            </h5>
        </div>
        <div class="modal-body">
            Are you <b>really</b> sure you want to skip <b>homing and check of the motors</b>? If there is any material in the chambers or the chambers or recoater are not positioned correctly, the printer might be damaged!
        </div>
        <div class="modal-footer">
            @if (!_doubleConfirmed)
            {
                <button @onclick="() => _doubleConfirmed = true" class="btn btn-danger">Skip homing</button>
            }
            else
            {
                <button @onclick="() => SkipStep(true)" class="btn btn-danger" style="font-weight: bold">Really skip homing!</button>
            }
            <button @onclick="() => modal.Close()" class="btn btn-secondary">Stay at this step</button>
        </div>
    </div>
</ModalWrapper>

<ModalWrapper @ref="_doHoming" class="app-modal" Context="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">
                Perform homing and motor check?
            </h5>
        </div>
        <div class="modal-body">
            Are you <b>really</b> sure you want to perform <b>homing and check of the motors</b>? If there is any material in the chambers the printer might be damaged!
        </div>
        <div class="modal-footer">
            <button @onclick="() => DoStep(true)" class="btn btn-danger">Perform homing</button>
            <button @onclick="() => modal.Close()" class="btn btn-secondary">Stay at this step</button>
        </div>
    </div>
</ModalWrapper>

<ModalWrapper @ref="_skipFill" class="app-modal" Context="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">
                Skip filling?
            </h5>
        </div>
        <div class="modal-body">
            Are you <b>really</b> sure you want to skip <b>filling of the printer</b> with powder? If the chambers are left empty or not correctly filled, the print or printer may be damaged!
        </div>
        <div class="modal-footer">
            @if (!_doubleConfirmed)
            {
                <button @onclick="() => _doubleConfirmed = true" class="btn btn-danger">Skip filling</button>
            }
            else
            {
                <button @onclick="() => SkipStep(true)" class="btn btn-danger" style="font-weight: bold">Really skip filling!</button>
            }
            <button @onclick="() => modal.Close()" class="btn btn-secondary">Stay at this step</button>
        </div>
    </div>
</ModalWrapper>

<ModalWrapper @ref="_doneFill" class="app-modal" Context="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">
                Done with filling?
            </h5>
        </div>
        <div class="modal-body">
            <p>
                Are you <b>really</b> sure you have finished with the powder chamber filling? If the powder chamber is left empty or not correctly filled, the print or printer may be damaged!
            </p>
            <p>
                If you continue, the printer will perform automatic bed leveling and it will try to evenly transfer the powder to the print chamber.
            </p>
        </div>
        <div class="modal-footer">
            <button @onclick="() => DoStep(true)" class="btn btn-danger">Filling is done, continue with bed leveling</button>
            <button @onclick="() => modal.Close()" class="btn btn-secondary">Stay at this step</button>
        </div>
    </div>
</ModalWrapper>

<ModalWrapper @ref="_skipBedLeveling" class="app-modal" Context="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">
                Skip bed leveling?
            </h5>
        </div>
        <div class="modal-body">
            Are you <b>really</b> sure you want to skip the <b>bed leveling</b>? If the printer is not correctly filled, the print or printer may be damaged!
        </div>
        <div class="modal-footer">
            @if (!_doubleConfirmed)
            {
                <button @onclick="() => _doubleConfirmed = true" class="btn btn-danger">Skip bed leveling</button>
            }
            else
            {
                <button @onclick="() => SkipStep(true)" class="btn btn-danger" style="font-weight: bold">Really skip bed leveling!</button>
            }
            <button @onclick="() => modal.Close()" class="btn btn-secondary">Stay at this step</button>
        </div>
    </div>
</ModalWrapper>

<ModalWrapper @ref="_doneBedLeveling" class="app-modal" Context="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">
                Done with bed leveling?
            </h5>
        </div>
        <div class="modal-body">
            <p>
                Are you <b>really</b> sure the surface of both chambers is smooth? If the printer is not correctly filled, the print or printer may be damaged!
            </p>
            <p>
                If you continue, the printer will move the <b>print bed</b> down slightly, to prepare for printing.
            </p>
        </div>
        <div class="modal-footer">
            <button @onclick="() => DoStep(true)" class="btn btn-danger">I have completed the bed leveling</button>
            <button @onclick="() => modal.Close()" class="btn btn-secondary">Stay at this step</button>
        </div>
    </div>
</ModalWrapper>

<ModalWrapper @ref="_skipHalogen" class="app-modal" Context="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">
                Skip halogen check?
            </h5>
        </div>
        <div class="modal-body">
            Are you <b>really</b> sure you want to skip the <b>check of halogen heaters</b>? If the heaters are not working correctly, the printing will not work!
        </div>
        <div class="modal-footer">
            @if (!_doubleConfirmed)
            {
                <button @onclick="() => _doubleConfirmed = true" class="btn btn-danger">Skip halogen check</button>
            }
            else
            {
                <button @onclick="() => SkipStep(true)" class="btn btn-danger" style="font-weight: bold">Really skip halogen check!</button>
            }
            <button @onclick="() => modal.Close()" class="btn btn-secondary">Stay at this step</button>
        </div>
    </div>
</ModalWrapper>

<ModalWrapper @ref="_doHalogen" class="app-modal" Context="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">
                Perform halogen check?
            </h5>
        </div>
        <div class="modal-body">
            Have you closed the printer? Otherwise the check will fail.
        </div>
        <div class="modal-footer">
            <button @onclick="() => DoStep(true)" class="btn btn-danger">Perform halogen check</button>
            <button @onclick="() => modal.Close()" class="btn btn-secondary">Stay at this step</button>
        </div>
    </div>
</ModalWrapper>

<ModalWrapper @ref="_doChamberHeaters" class="app-modal" Context="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">
                Perform chamber heaters check?
            </h5>
        </div>
        <div class="modal-body">
            Do you want to continue?
        </div>
        <div class="modal-footer">
            <button @onclick="() => DoStep(true)" class="btn btn-danger">Perform chamber heater check</button>
            <button @onclick="() => modal.Close()" class="btn btn-secondary">Stay at this step</button>
        </div>
    </div>
</ModalWrapper>

<ModalWrapper @ref="_doPrint" class="app-modal" Context="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">
                Start job?
            </h5>
        </div>
        <div class="modal-body">
            Do you really want to start the job?
        </div>
        <div class="modal-footer">
            <button @onclick="() => DoStep(true)" class="btn btn-danger">Print!</button>
            <button @onclick="() => modal.Close()" class="btn btn-secondary">Stay at this step</button>
        </div>
    </div>
</ModalWrapper>

@if (_fixedStep == null && _params == null)
{
    <div class="printing-notification">
        <p>
            <span class="badge badge-dark text-wrap">
                <i class="bi bi-exclamation-triangle" /> No job is selected.
            </span>
        </p>
        <p>
            <a class="btn btn-theme" href="@Jobs.SelfPath">Go to jobs</a>
        </p>
    </div>
    return;
}

<div class="container">
    <div class="jumbotron pt-4 pb-2 @(StepIndex is Step.Preview ? "h-100 preview-container" : "")">
        @{
            var totalValue = _volumeTotals != null ? GetUnits(_volumeTotals!.Total.Depth, Units.Millimeter) : default;
            var totalVolume = _volumeTotals != null ? GetUnits(_volumeTotals!.Total.Volume / Units.LitersToMillimeter3, Units.Liters) : default;
        }
        @switch (StepIndex)
        {
            case Step.VolumeCheck:
                <h2>
                    Job is too large
                </h2>
                <hr class="my-3">
                <p>
                    Printer will require following amount of powder in <i>Powder chamber</i> to print the selected job:
                </p>
                <table class="table table-sm mb-0">
                    <tbody>
                        @if (_volumeTotals!.BedLeveling.Depth > 0)
                        {
                            var value = GetUnits(_volumeTotals!.BedLeveling.Depth, Units.Millimeter);
                            var volume = GetUnits(_volumeTotals!.BedLeveling.Volume / Units.LitersToMillimeter3, Units.Liters);
                            <tr>
                                <th scope="row">Bed leveling</th>
                                <td class="text-right"><b>@(Math.Ceiling(value.Value))@value.Unit</b></td>
                                <td class="text-right">corresponds to <b>@(volume.Value.RoundToDecimal(1, true)) @volume.Unit</b> of powder</td>
                            </tr>
                        }
                        @if (_volumeTotals!.BedPreparationAndCap.Depth > 0)
                        {
                            var value = GetUnits(_volumeTotals!.BedPreparationAndCap.Depth, Units.Millimeter);
                            var volume = GetUnits(_volumeTotals!.BedPreparationAndCap.Volume / Units.LitersToMillimeter3, Units.Liters);
                            <tr>
                                <th scope="row">Bed preparation &amp; cap</th>
                                <td class="text-right"><b>@(Math.Ceiling(value.Value))@value.Unit</b></td>
                                <td class="text-right">corresponds to <b>@(volume.Value.RoundToDecimal(1, true)) liters</b> of powder</td>
                            </tr>
                        }
                        @if (_volumeTotals!.Job.Depth > 0)
                        {
                            var value = GetUnits(_volumeTotals!.Job.Depth, Units.Millimeter);
                            var volume = GetUnits(_volumeTotals!.Job.Volume / Units.LitersToMillimeter3, Units.Liters);
                            <tr>
                                <th scope="row">Job</th>
                                <td class="text-right"><b>@(Math.Ceiling(value.Value))@value.Unit</b></td>
                                <td class="text-right">corresponds to <b>@(volume.Value.RoundToDecimal(1, true)) @volume.Unit</b> of powder</td>
                            </tr>
                        }
                        <tr class="powder-total-row">
                            <th scope="row">Total</th>
                            <td class="text-right"><b>@(Math.Ceiling(totalValue.Value))@totalValue.Unit</b></td>
                            <td class="text-right">corresponds to <b>@(totalVolume.Value.RoundToDecimal(1, true)) @totalVolume.Unit</b> of powder</td>
                        </tr>
                    </tbody>
                </table>
                <p class="pt-3">
                    <span class="badge badge-danger text-wrap">
                        Required print powder amount exceeds the physical dimensions of the powder chamber!
                    </span>
                </p>
                var reduceBy = GetUnits(_volumeTotals!.ReduceDepth!.Value.by, Units.Millimeter);
                var reduceMax = GetUnits(_volumeTotals!.ReduceDepth!.Value.max, Units.Millimeter);
                <p>
                    Please reduce the <i>Print job</i> depth by at least <b>@(Math.Ceiling(reduceBy.Value))@reduceBy.Unit</b> (maximum depth <b>@(Math.Floor(reduceMax.Value))@reduceMax.Unit</b>).
                    Please note that the <i>Job volume</i> includes extra powder required by sintered powder density (<i>Sintered factor</i> in profile).
                </p>
                <hr class="my-3">
                <p class="lead">
                    <a class="btn btn-primary btn-lg" role="button" href="@Jobs.SelfPath">Go to the <b>Jobs</b> page to fix the issue</a>
                    @if (_showForceSkipToEnd)
                    {
                        <a class="btn btn-warning btn-lg" role="button" @onclick="() => SkipToEnd()">Skip to the end</a>
                    }
                </p>
                break;
            case Step.Preview:
                <PrintPreview @ref="_preview" Printing="SlicingPreview" PrintingParameters="_params" LayerCount="_layerCount" />
                <p class="lead mt-2">
                    <a class="btn btn-primary btn-lg" role="button" @onclick="() => DoStep()">
                        @if (_preview?.IsDone ?? false)
                        {
                            <text>Continue...</text>
                        }
                        else
                        {
                            <text>Waiting for preview...</text>
                        }
                    </a>
                    @if (_showForceSkipToEnd)
                    {
                        <a class="btn btn-warning btn-lg" role="button" @onclick="() => SkipToEnd()">Skip to the end</a>
                    }
                </p>
                break;
            case Step.Homing:
                <h2>
                    Homing and motor check
                    @if (_fixedStep == null)
                    {
                        <span class="badge badge-secondary float-right step-indicator">Print step 1 of 5</span>
                    }
                </h2>
                <hr class="my-3">
                <p>
                    Please <span class="text-danger">make sure the printer is free of powder</span>, otherwise the homing procedure might cause the
                    powder to <span class="text-danger">overflow or damage</span> the printer.
                </p>
                <p>
                    Printer will move the recoater to the leftmost position, move both chambers to the topmost position and
                    check whether the motors work as expected.
                </p>
                <hr class="my-3">
                <p class="lead">
                    <a class="btn btn-primary btn-lg" role="button" @onclick="() => DoStep()">Continue and start homing...</a>
                    @if (_fixedStep == null)
                    {
                        <a class="btn btn-danger btn-lg" role="button" @onclick="() => SkipStep()">Skip this step</a>
                    }
                    @if (_showForceSkipToEnd)
                    {
                        <a class="btn btn-warning btn-lg" role="button" @onclick="() => SkipToEnd()">Force skip to end (DEBUG)</a>
                    }
                </p>
                break;
            case Step.PowderFill:
                <h2>
                    Fill the powder chamber with powder
                    @if (_fixedStep == null)
                    {
                        <span class="badge badge-secondary float-right step-indicator">Print step 2 of 5</span>
                    }
                </h2>
                <hr class="my-3">
                <p>
                    Please fill the <i>powder chamber</i> with total <b>@(Math.Ceiling(totalValue.Value))@totalValue.Unit</b> 
                    that corresponds to <b>@(totalVolume.Value.RoundToDecimal(1, true)) @totalVolume.Unit</b> of powder. 
                    Leave the <i>print chamber</i> empty. Powder should be filled to the same level as the top of the <i>powder mantinels</i>.
                    Fill in @_addPowderIterationCount total steps by clicking <i>Add Powder</i> button below repeatedly. 
                    After each click and fill of corresponding part of the powder, please use <i>the smoothing tool</i> to flatten and compact the power.
                </p>
                <table class="table table-sm mb-0">
                    <tbody>
                        @if (_volumeTotals!.BedLeveling.Depth > 0)
                        {
                            var value = GetUnits(_volumeTotals!.BedLeveling.Depth, Units.Millimeter);
                            var volume = GetUnits(_volumeTotals!.BedLeveling.Volume / Units.LitersToMillimeter3, Units.Liters);
                            <tr>
                                <th scope="row">Bed leveling</th>
                                <td class="text-right"><b>@(Math.Ceiling(value.Value))@value.Unit</b></td>
                                <td class="text-right">corresponds to <b>@(volume.Value.RoundToDecimal(1, true)) @volume.Unit</b> of powder</td>
                            </tr>
                        }
                        @if (_volumeTotals!.BedPreparationAndCap.Depth > 0)
                        {
                            var value = GetUnits(_volumeTotals!.BedPreparationAndCap.Depth, Units.Millimeter);
                            var volume = GetUnits(_volumeTotals!.BedPreparationAndCap.Volume / Units.LitersToMillimeter3, Units.Liters);
                            <tr>
                                <th scope="row">Bed preparation &amp; cap</th>
                                <td class="text-right"><b>@(Math.Ceiling(value.Value))@value.Unit</b></td>
                                <td class="text-right">corresponds to <b>@(volume.Value.RoundToDecimal(1, true)) liters</b> of powder</td>
                            </tr>
                        }
                        @if (_volumeTotals!.Job.Depth > 0)
                        {
                            var value = GetUnits(_volumeTotals!.Job.Depth, Units.Millimeter);
                            var volume = GetUnits(_volumeTotals!.Job.Volume / Units.LitersToMillimeter3, Units.Liters);
                            <tr>
                                <th scope="row">Job</th>
                                <td class="text-right"><b>@(Math.Ceiling(value.Value))@value.Unit</b></td>
                                <td class="text-right">corresponds to <b>@(volume.Value.RoundToDecimal(1, true)) @volume.Unit</b> of powder</td>
                            </tr>
                        }
                        <tr class="powder-total-row">
                            <th scope="row">Total</th>
                            <td class="text-right"><b>@(Math.Ceiling(totalValue.Value))@totalValue.Unit</b></td>
                            <td class="text-right">corresponds to <b>@(totalVolume.Value.RoundToDecimal(1, true)) @totalVolume.Unit</b> of powder</td>
                        </tr>
                    </tbody>
                </table>
                <p class="lead pt-3">
                    @if (_addPowderIteration < _addPowderIterationCount)
                    {
                        <a class="btn btn-primary btn-lg" role="button" @onclick="DoAddPowder">Add Powder (@(_addPowderIteration + 1)/@(_addPowderIterationCount))</a>
                    }
                </p>
                <hr class="my-3">
                <p class="lead">
                    @if (_addPowderIteration < _addPowderIterationCount)
                    {
                        <a class="btn btn-secondary btn-lg disabled" role="button" @onclick="() => {}">Add all powder before continuing...</a>
                    }
                    else
                    {
                        <a class="btn btn-primary btn-lg" role="button" @onclick="() => DoStep()">I have filled the powder chaber...</a>
                    }
                    @if (_fixedStep == null)
                    {
                        <a class="btn btn-danger btn-lg" role="button" @onclick="() => SkipStep()">Skip this step</a>
                        @if (_showForceSkipToEnd)
                        {
                            <a class="btn btn-warning btn-lg" role="button" @onclick="DoMarkAddedPowder">Mark all powder as added</a>
                            <a class="btn btn-warning btn-lg" role="button" @onclick="() => SkipToEnd()">Skip to the end</a>
                        }
                    }
                </p>
                break;
            case Step.BedLeveling:
                <h2>
                    Flatten the surface of both chambers
                    @if (_fixedStep == null)
                    {
                        <span class="badge badge-secondary float-right step-indicator">Print step 3 of 5</span>
                    }
                </h2>
                <hr class="my-3">
                <p>
                    The surface in both the <i>powder chamber</i> and the <i>print chaber</i> should now be smooth.
                    If there is some extra powder on <i>powder mantinels</i>, that is not a problem. 
                    Smooth surface should be all the way to the <i>overpowder bin slit</i> at the right of the <i>print chamber</i>.
                </p>
                <p>
                    If the surface still needs some smoothing, please add extra powder where required. 
                    You can also get more powder by scraping some from top of the <i>powder mantinels</i> with <i>smoothing tool</i>.
                    After you add powder either way, press the <b>Recoat layer</b> button to perform a <i>recoater pass</i>.
                </p>
                <p class="lead pt-3">
                    <a class="btn btn-secondary btn-lg" role="button" @onclick="RecoatLayer">Recoat layer</a>
                </p>
                <hr class="my-3">
                <p class="lead">
                    <a class="btn btn-primary btn-lg" role="button" @onclick="() => DoStep()">I have flattened the surface...</a>
                    @if (_fixedStep == null)
                    {
                        <a class="btn btn-danger btn-lg" role="button" @onclick="() => SkipStep()">Skip this step</a>
                    }
                    @if (_showForceSkipToEnd)
                    {
                        <a class="btn btn-warning btn-lg" role="button" @onclick="() => SkipToEnd()">Force skip to end (DEBUG)</a>
                    }
                </p>
                break;
            case Step.HalogenCheck:
                <h2>
                    Halogen heater check
                    @if (_fixedStep == null)
                    {
                        <span class="badge badge-secondary float-right step-indicator">Print step 4 of 5</span>
                    }
                </h2>
                <hr class="my-3">
                <p>
                    Please <span class="text-danger">close the printer</span>, the printer will now check that the halogen heaters, that are used for controlling temperature of the surface, work as expected.
                </p>
                <p>
                    Printer must contain at least <span class="text-danger">minimum layer of powder</span> in the <i>Print chamber</i> for the check to succeed.
                </p>
                <hr class="my-3">
                <p class="lead">
                    <a class="btn btn-primary btn-lg" role="button" @onclick="() => DoStep()">Continue and check the heaters...</a>
                    @if (_fixedStep == null)
                    {
                        <a class="btn btn-danger btn-lg" role="button" @onclick="() => SkipStep()">Skip this step</a>
                        @if (_showForceSkipToEnd)
                        {
                            <a class="btn btn-warning btn-lg" role="button" @onclick="() => SkipToEnd()">Skip to the end</a>
                        }
                    }
                </p>
                break;
            case Step.ReadyToPrint:
                <h2>
                    Printing is ready
                    @if (_fixedStep == null)
                    {
                        <span class="badge badge-secondary float-right step-indicator">Print step 5 of 5</span>
                    }
                </h2>
                <hr class="my-3">
                <p>
                    Printer has been <span class="text-success">sucessfuly prepared and checked!</span> Please continue to start the job on the <i>status</i> page.
                </p>
                @if (!isSafeButtonOn && needsLaser)
                {
                    <p class="pt-3">
                        <span class="badge badge-warning text-wrap">
                            Please close the <i>Printer Lid</i>, put on the <i>Over Powder Bin</i> and turn on the <i>Laser Safety Key</i> before continuing. Remember to turn off the <i>Laser Safety Key</i> while not printing!
                        </span>
                    </p>
                }
                @if (_showSurfaceHeaterOverride)
                {
                    <p>
                        <div class="form-check checkbox-slider--b-flat">
                            <label>
                                <input type="checkbox" @bind="_surfaceHeaterOverride"><span>Override and do not load and start soft surface heater (leave it as-is)</span>
                            </label>
                        </div>
                    </p>
                }
                @if (_showDebugLayerOptions)
                {
                    <p>
                        Starting at layer <ValueEditor Title="Starting layer " @bind-Value="_layerStartFromOne" Placeholder="1 (first)" class="w-auto" /> with <ValueEditor Title="Starting layer" @bind-Value="_layerCount" Placeholder="all remaining" class="w-auto" /> printed layers.
                    </p>
                    <p>
                        <div class="form-check checkbox-slider--b-flat">
                            <label>
                                <input type="checkbox" @bind="_disableLayerAdditiveMovement"><span>Disable layer additive movement</span>
                            </label>
                        </div>
                    </p>
                }
                <hr class="my-3">
                <p class="lead">
                    @if (isSafeButtonOn || !needsLaser)
                    {
                        <a class="btn btn-primary btn-lg" role="button" @onclick="() => DoStep()">Start the job...</a>
                    }
                    else
                    {
                        <a class="btn btn-primary btn-lg" role="button" @onclick="() => _showDebugPrintOptions ? DoStep() : Task.CompletedTask">Waiting for laser safety...</a>
                    }
                    <a class="btn btn-secondary btn-lg" role="button" href="@Jobs.SelfPath">I have changed my mind</a>
                </p>
                break;
        }
    </div>
</div>


@code {
    public enum Step
    {
        NotSet = 0,
        Preview,
        VolumeCheck,
        Homing,
        PowderFill,
        BedLeveling,
        HalogenCheck,
        ReadyToPrint,
    }

    public const string SelfPath = "/wizard/print";
    private const string CssScope = "b-print-wizard";

    private readonly object _cameraViewKey = new();
    private readonly object _halogenCameraViewKey = new();
    private Step? _fixedStep;
    private CancelModal? _halogenCheckModal;

    private ModalWrapper? _skipToEnd;
    private ModalWrapper? _skipHoming, _doHoming;
    private ModalWrapper? _skipFill, _doneFill, _skipBedLeveling, _doneBedLeveling;
    private ModalWrapper? _skipHalogen, _doHalogen, _doChamberHeaters;
    private ModalWrapper? _doPrint;
    private bool _doubleConfirmed;
    private int? _layerStartFromOne;
    private int? _layerCount;
    private int _addPowderIteration;
    private int _addPowderIterationCount;
    private PrintingParameters? _params;
    private PowderVolumeTotals? _volumeTotals;
    private bool _completedPreview;
    private double _sinteredVolume;
    private double _sinteredVolumeMax;
    private bool _surfaceHeaterOverride;
    private bool _showDebugLayerOptions;
    private bool _disableLayerAdditiveMovement;
    private bool _showSurfaceHeaterOverride;
    private bool _showForceSkipToEnd;
    private bool _showDebugPrintOptions;
    private double? _startZ2Position;
    private PrintPreview? _preview;

    [Parameter]
    public string? FixedStepName
    {
        get => _fixedStep?.ToString();
        set
        {
            if (Enum.TryParse<Step>(value, true, out var step))
                _fixedStep = step;
        }
    }

    protected override void OnInitialized()
    {
        if (MainLayout!.IsDeveloperMode)
        {
            _showForceSkipToEnd = true;
            _showDebugPrintOptions = true;
        }
        if (_fixedStep != null)
        {
            StepIndex = _fixedStep.Value;
        }
        else
        {
            _params = PrintingParamsProvider.PrintingParams as PrintingParameters;
            _layerCount = null;
            if (MainLayout!.IsDeveloperMode && _params != null)
                _showSurfaceHeaterOverride = !string.IsNullOrWhiteSpace(_params.Setup.SoftHeaterFilename);
            if (_params?.Job is AnalyseJob analyseJob)
            {
                StepIndex = Step.Homing;
                var setup = new PowderVolumeSetup
                    {
                        LayerThickness = (double)_params.Profile.LayerThickness!.Value,
                        JobChamberDepth = 0,
                        ChamberDepth = (double)_params.Profile.PrintableDepth!.Value,
                        SinteredVolumeFactor = (double)_params.Profile.SinteredVolumeFactor!.Value,
                    };
                _volumeTotals = LayerClient.GetPowderVolume(setup);
            }
            else if (_params != null)
            {
                _layerCount = _params.ExactThickness
                    ? (int)Math.Ceiling(_params.Job.NestingState.ChamberDepth!.Value * 1000 / _params.Setup.LayerThickness)
                    : null;
                _showDebugLayerOptions = _showDebugPrintOptions;
                _disableLayerAdditiveMovement = _params.Setup.DisableLayerAdditiveMovement;
                StepIndex = Step.Preview;

                // calc "some initial" volume totals, that will hopefully be overwritten when user completes preview
                _sinteredVolume = _sinteredVolumeMax = (double?)_params.Job.NestingState.SinteredVolume ?? 0; // NOTE: exact value will be known after preview
                CalcPrintJobVolumeTotals();
            }
        }

        SlicingPreview.BackgroundTask.StateChanged.AddHandler(TryInvokeStateHasChangedAsync);
        base.OnInitialized();
    }

    private async Task DoStep(bool force = false)
    {
        switch (StepIndex)
        {
            case Step.Preview:
                if (_preview!.IsDone)
                    await Advance();
                break;
            case Step.Homing:
                if (!force)
                    await _doHoming!.Show();
                else
                {
                    await _doHoming!.Close();
                    if (await DoHoming())
                        await Advance();
                }
                break;
            case Step.PowderFill:
                if (!force)
                    await _doneFill!.Show();
                else
                {
                    await _doneFill!.Close();
                    if (await DoBedLeveling())
                        await Advance();
                }
                break;
            case Step.BedLeveling:
                if (!force)
                    await _doneBedLeveling!.Show();
                else
                {
                    await _doneBedLeveling!.Close();
                    if (await FinishBedLeveling())
                        await Advance();
                }
                break;
            case Step.HalogenCheck:
                if (!force)
                    await _doHalogen!.Show();
                else
                {
                    await _doHalogen!.Close();
                    if (await DoHalogenCheck())
                        await Advance();
                }
                break;
            case Step.ReadyToPrint:
                if (!force)
                    await _doPrint!.Show();
                else
                {
                    await _doPrint!.Close();
                    await DoPrint();
                }
                break;
        }
    }

    private async Task SkipStep(bool fromModal = false)
    {
        _doubleConfirmed = false;
        switch (StepIndex)
        {
            case Step.Homing:
                if (!fromModal)
                    await _skipHoming!.Show();
                else
                {
                    await _skipHoming!.Close();
                    await Advance();
                }
                break;
            case Step.PowderFill:
                if (!fromModal)
                    await _skipFill!.Show();
                else
                {
                    await _skipFill!.Close();
                    await Advance();
                }
                break;
            case Step.BedLeveling:
                if (!fromModal)
                    await _skipBedLeveling!.Show();
                else
                {
                    await _skipBedLeveling!.Close();
                    await Advance();
                }
                break;
            case Step.HalogenCheck:
                if (!fromModal)
                    await _skipHalogen!.Show();
                else
                {
                    await _skipHalogen!.Close();
                    await Advance();
                }
                break;
        }
    }

    private async Task SkipToEnd(bool fromModal = false)
    {
        if (!fromModal)
        {
            _doubleConfirmed = false;
            await _skipToEnd!.Show();
        }
        else
        {
            await _skipToEnd!.Close();
            await Advance(Step.ReadyToPrint);
        }
    }

    private Task Advance(Step? advanceTo = null)
    {
        if (_fixedStep != null)
        {
            ToastProvider.Show(new ToastMessage
                    {
                        Key = this,
                        Type = ToastMessageType.Information,
                        HeaderText = "Success",
                        BodyText = "Wizard has completed successfully",
                        Silent = true, // user is interacting, no beeping is necessary
                    });
            NavigateAfterFinished();
        }
        else if (advanceTo != null)
            StepIndex = advanceTo.Value;
        else
            StepIndex++;
        if (StepIndex == Step.VolumeCheck)
        {
            if (_params != null && _preview != null && _preview.IsDone)
            {
                _completedPreview = true;
                _sinteredVolume = _preview.LayerWeights!
            .Sum(x => x.FillTotalRelative)
                    * Projection.Size.x * Projection.Size.y
                    * ((double)_params.Profile.LayerThickness!.Value / 1_000);
                _sinteredVolumeMax = _preview.LayerWeights!
                .Sum(x => x.FillMaxRelative)
                    * Projection.Size.x * Projection.Size.y
                    * ((double)_params.Profile.LayerThickness!.Value / 1_000);
                CalcPrintJobVolumeTotals();
                if (_volumeTotals!.ReduceDepth == null) // no too large volume
                    StepIndex++;
                _addPowderIteration = 0;
                _addPowderIterationCount = _params.Profile.AddPowderDepth > 0
                ? (int)Math.Ceiling(_volumeTotals.Total.Depth / (double)_params.Profile.AddPowderDepth!.Value)
                : _volumeTotals.Total.Depth > 0 ? 1 : 0;
            }
            else
                StepIndex++;
        }
        return Task.CompletedTask;
    }

    private void CalcPrintJobVolumeTotals()
    {
        Debug.Assert(_params != null);
        var setup = new PowderVolumeSetup
                {
                    LayerThickness = (double)_params.Profile.LayerThickness!.Value,
                    BedPreparationThickness = (double)_params.Profile.BedPreparationThickness!.Value,
                    PrintCapThickness = (double)_params.Profile.PrintCapThickness!.Value,
                    JobSinteredVolume = _sinteredVolumeMax, // NOTE: use "max" to prevent underdosing
                    JobChamberDepth = (double)_params.Job.NestingState.ChamberDepth!.Value,
                    ChamberDepth = (double)_params.Profile.PrintableDepth!.Value,
                    SinteredVolumeFactor = (double)_params.Profile.SinteredVolumeFactor!.Value,
                };
        _volumeTotals = LayerClient.GetPowderVolume(setup);
    }

    private async Task DoPrint()
    {
        if (IsPrinting) // page will render error
            return;
        var printingParams = _params; // capture variable
        Debug.Assert(printingParams != null);

        var setup = printingParams.Setup.Clone();
        if (_surfaceHeaterOverride)
        {
            setup.SoftHeaterFilename = null;
        }
        if (_showDebugLayerOptions)
        {
            setup.DisableLayerAdditiveMovement = _disableLayerAdditiveMovement;
        }
        setup.LayerStart = Math.Max(_layerStartFromOne - 1 ?? 0, 0);
        setup.LayerCount = _layerCount;
        var oldStats = PrintingGlobal.GetLayerStats(printingParams);
        var volumeTotals = _volumeTotals; // capture variable
        await PrintingGlobal.BackgroundTask.StartTask(new(),
        (cancel) => Task.Run(async () => // NOTE: ensure we run the printing on separate task, disconnected from browser synchronization context!
        {
            await using (var session = await PrintSessionStorage.BeginSession(
                printingParams.Job,
                printingParams.Setup,
                _startZ2Position,
                (detail, cancel) =>
                {
                    var printDepth = volumeTotals?.Total.Depth * (volumeTotals?.PrintChamberArea / volumeTotals?.PowderChamberArea);
                    detail.CompletedPreview = _completedPreview;
                    detail.SinteredVolume = (decimal)_sinteredVolume;
                    detail.SinteredVolumeMax = (decimal)_sinteredVolumeMax;
                    detail.LayerThickness = printingParams.Profile.LayerThickness!.Value;
                    detail.BedPreparationThickness = printingParams.Profile.BedPreparationThickness!.Value;
                    detail.PrintCapThickness = printingParams.Profile.PrintCapThickness!.Value;
                    detail.JobChamberDepth = printingParams.Job.NestingState.ChamberDepth ?? 0M;
                    detail.ProfileSinteredVolumeFactor = printingParams.Profile.SinteredVolumeFactor!.Value;
                    detail.TotalPowderVolume = (decimal)(volumeTotals?.Total.Volume ?? 0);
                    detail.TotalPowderDepth = (decimal)(volumeTotals?.Total.Depth ?? 0);
                    detail.FinalPrintDepth = (decimal)(printDepth ?? 0); // NOTE: will be updated using actual Z2 position in session finish
                    detail.PrintChamberArea = (decimal)(volumeTotals?.PrintChamberArea ?? 0);
                    detail.PowderChamberArea = (decimal)(volumeTotals?.PowderChamberArea ?? 0);
                    return Task.CompletedTask;
                },
                cancel
            ))
            {
                try
                {
                    PrintingServiceLayerStats? newStats = null;
                    if (printingParams.Job is AnalyseJob)
                    {
                        await PrintingGlobal.AnalyseHeating(
                            setup,
                            printingParams.Job.Name,
                            cancel);
                    }
                    else
                    {
                        await PrintingGlobal.PrintLayers(
                            null,
                            printingParams.Instances,
                            _preview?.IsDone == true ? _preview.LayerWeights : null,
                            setup,
                            printingParams.Job.Name,
                            oldStats,
                            CleanupBeforePrint,
                            async stats =>
                            {
                                newStats = stats;
                                await TrySaveStatsToProfile(printingParams, newStats, printingParams.Profile.Id);
                            },
                            cancel);
                    }
                    await session.Succeeded(
                        PrintingGlobal.SoftCancelMode == PrintingSoftCancelMode.NotSet
                            ? PrintSessionResult.Succeeded
                            : PrintSessionResult.SucceededPartially,
                        (detail, cancel) =>
                        {
                            detail.HeatingDuration = newStats?.HeatingDuration ?? TimeSpan.Zero;
                            detail.ObjectsDuration = newStats?.ObjectsDuration ?? TimeSpan.Zero;
                            detail.CoolingDuration = newStats?.CoolingDuration ?? TimeSpan.Zero;
                            return Task.CompletedTask;
                        },
                        default);
                    var utcNow = DateTime.UtcNow;
                    ToastProvider.Show(new ToastMessage
                            {
                                Type = ToastMessageType.Information,
                                HeaderText = "Job succeeded",
                                BodyText = "Job has finished successfully!",
                                Body = @<text>The job has finished successfully at <BrowserTime DateTime="utcNow" />! <br />Click here to eject the cake...</text>,
                                TargetUri = $"{EjectWizard.SelfPath}",
                                Silent = false, // async, beep
                            });
                }
                catch (Exception ex)
                {
                    if (cancel.IsCancellationRequested)
                    {
                        await session.Cancelled(default);
                        ToastProvider.Show(new ToastMessage
                            {
                                Type = ToastMessageType.Warning,
                                HeaderText = "Job failed",
                                Body = @<text>The job was cancelled! <br />Click here to eject the cake...</text>,
                                TargetUri = $"{EjectWizard.SelfPath}",
                                Exception = ex,
                                Silent = false, // async, beep
                            });
                    }
                    else
                    {
                        await session.Failed(ex, default);
                        if (PrinterClient.IsShutdown)
                        {
                            ToastProvider.Show(new ToastMessage
                                {
                                    Type = ToastMessageType.Error,
                                    HeaderText = "Job failed",
                                    Body =@<text>@ex.Message</text> ,
                                    Exception = ex,
                                    Silent = false, // async, beep
                                });
                        }
                        else
                        {
                            ToastProvider.Show(new ToastMessage
                                {
                                    Type = ToastMessageType.Error,
                                    HeaderText = "Job failed",
                                    Body =@<text>@ex.Message <br />Click here to eject the cake...</text> ,
                                    TargetUri = $"{EjectWizard.SelfPath}",
                                    Exception = ex,
                                    Silent = false, // async, beep
                                });
                        }
                    }
                }
            }
        }));
        NavigationManager.NavigateTo(PrinterStatus.SelfPath);
    }

    protected virtual async Task CleanupBeforePrint(CancellationToken cancel)
    {
        foreach (var service in INestingService.Services)
            await service.ClearInstances(true);
        foreach (var service in IPrintingService.Services)
            service.Clear();
        PrintingParamsProvider.PrintingParams = null;

        await JSRuntime.CollectGarbage(cancel);
    }

    private async Task<bool> TrySaveStatsToProfile(PrintingParameters parameters, PrintingServiceLayerStats stats, Guid profileId)
    {
        var profile = await ProfileStorage.TryGetProfile(profileId);
        if (profile == null)
            return false;
        PrintingGlobal.UpdateLayerStatsProfile(stats, profile);
        return await ProfileStorage.TryUpdateProfile(profile);
    }

    private async Task<bool> DoHoming()
    {
        if (IsPrinting) // page will render error
            return false;
        ResetStatus();
        return await ProgressModal.Execute(
            async cancel =>
            {
                await LayerClient.HomeBedsAndRecoater(0, OnStatus, cancel);
                _startZ2Position = 0; // NOTE: homed, position is 0
                return true;
            },
            false,
            titleText: "Please wait",
            bodyText: "Homing in progress...",
            cancelText: "Interrupt homing",
            errorToastHeaderText: "Failed to home motors");
    }

    private async Task<bool> DoBedLeveling()
    {
        if (IsPrinting) // page will render error
            return false;
        ResetStatus();
        if (!await ProgressModal.Execute(
            async cancel =>
            {
                await LayerClient.BedLeveling(OnStatus, cancel);
                return true;
            },
            false,
            titleText: "Please wait",
            bodyText: "Bed leveling in progress...",
            cancelText: "Interrupt bed leveling",
            errorToastHeaderText: "Failed to do bed leveling"))
        {
            await CancelModal.Execute(
                async cancel =>
                {
                    await LayerClient.SetPowderDepth(_volumeTotals!.Total.Depth * 1000, cancel: cancel);
                },
                titleText: "Please wait",
                bodyText: "Resetting powder bed...",
                // NOTE: no cancellation!
                errorToastHeaderText: "Failed to reset powder bed");
        }
        return true;
    }

    private async Task<bool> FinishBedLeveling()
    {
        if (IsPrinting) // page will render error
            return false;
        ResetStatus();
        return await ProgressModal.Execute(
            async cancel =>
            {
                await LayerClient.FinishBedLeveling(OnStatus, cancel);
                return true;
            },
            false,
            titleText: "Please wait",
            bodyText: "Finishinh bed leveling...",
            cancelText: "Interrupt bed leveling finish",
            errorToastHeaderText: "Failed to do bed leveling finish");
    }

    private async Task<bool> DoHalogenCheck()
    {
        if (IsPrinting) // page will render error
            return false;
        ResetStatus();
        return await _halogenCheckModal!.Execute(
            async cancel =>
            {
                await HalogenHeaterChecker.CheckHalogenHeaters(OnStatus, cancel);
                return true;
            },
            false,
            titleText: "Halogen check in progress...",
            cancelText: "Interrupt halogen check",
            errorToastHeaderText: "Error when checking halogen heaters");
    }

    private async Task<bool> DoChamberHeatersCheck()
    {
        if (IsPrinting) // page will render error
            return false;
        ResetStatus();
        return await ProgressModal.Execute(
            async cancel =>
            {
                await ChamberHeaterChecker.CheckChamberHeaters(OnStatus, cancel);
                return true;
            },
            false,
            titleText: "Please wait",
            bodyText: "Chamber heater check in progress...",
            cancelText: "Interrupt chamber heater check",
            errorToastHeaderText: "Error when checking halogen heaters");
    }

    private async Task RecoatLayer()
    {
        if (IsPrinting) // page will render error
            return;
        var printingParams = _params;
        Debug.Assert(printingParams != null);
        await CancelModal.Execute(
            async cancel =>
            {
                var setup = new Movement.BeginLayerSetup
                    {
                        Enabled = true,
                        DisableZMovement = true,
                    };
                await LayerClient.BeginLayer(setup, cancel: cancel);
            },
            titleText: "Please wait",
            bodyText: "Recoating in progress...",
            // NOTE: no cancellation!
            errorToastHeaderText: "Failed to run recoater");
    }

    private void DoMarkAddedPowder()
    {
        if (IsPrinting) // page will render error
            return;
        _addPowderIteration = _addPowderIterationCount;
    }

    private async Task DoAddPowder()
    {
        if (IsPrinting) // page will render error
            return;
        if (_addPowderIteration >= _addPowderIterationCount)
            return;
        await CancelModal.Execute(
            async cancel =>
            {
                await LayerClient.SetPowderDepth(_volumeTotals!.Total.Depth * 1000 * (_addPowderIteration + 1) / _addPowderIterationCount, cancel: cancel);
                _addPowderIteration++;
            },
            titleText: "Please wait",
            bodyText: "Moving powder bed for more powder...",
            // NOTE: no cancellation!
            errorToastHeaderText: "Failed to move powder bed");
    }

    public override async ValueTask DisposeAsync()
    {
        SlicingPreview.BackgroundTask.StateChanged.RemoveHandler(TryInvokeStateHasChangedAsync);
        await base.DisposeAsync();
    }
}
