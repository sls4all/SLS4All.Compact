@page "/wizard/galvo-calibration"
@using System.Diagnostics
@using Microsoft.Extensions.Options
@using Nito.AsyncEx
@using SLS4All.Compact.Camera
@using SLS4All.Compact.Diagnostics
@using SLS4All.Compact.IO
@using SLS4All.Compact.Movement
@using SLS4All.Compact.Nesting
@using SLS4All.Compact.Power
@using SLS4All.Compact.ComponentModel
@using SLS4All.Compact.Printer
@using SLS4All.Compact.Printing
@using SLS4All.Compact.Processing.Meshes
@using SLS4All.Compact.Scripts
@using SLS4All.Compact.Slicing
@using SLS4All.Compact.Storage.PrintJobs
@using SLS4All.Compact.Storage.PrintProfiles
@using SLS4All.Compact.Storage.PrinterSettings
@using SLS4All.Compact.Temperature
@using SLS4All.Compact.Validation
@using SLS4All.Compact.Numerics
@inherits WizardBase<GalvoCalibrationWizard.Step>
@inject IToastProvider ToastProvider
@inject IPrintingService PrintingGlobal
@inject ILayerClient LayerClient
@inject IPrinterSettingsStorage PrinterSettings
@inject IOptionsMonitor<GalvoCalibrationWizardOptions> Options
@inject IInputClient InputClient
@inject IMovementClient MovementClient
@inject IValidationContextFactoryScoped ValidationContextFactory
@inject IPrinterSettingsStorage SettingsStorage
@inject IObjectFactory<IEmergencyHelper, object> EmergencyHelper
@inject IPrinterSafetySessionManager SafetySession
@inject IBedProjection Projection
@inject IPrinterClient PrinterClient
@inject IMovementClient Movement
@inject IHotspotCalculator HotspotCalculator
@inject ILogger<GalvoCalibrationWizard> Logger
@inject ICodePlotter Plotter
@inject IJSRuntime JSRuntime
@inject GalvoCalibrationWizard.ValuesContainer Values

@{
    if (!CanContinueIfNotPrinting(__builder))
        return;
    base.BuildRenderTree(__builder);

    var isSafeButtonOn = InputClient.CurrentState.TryGetEntry(InputClient.SafeButtonId, out var state) && state.Value;
}

<CancelModal @ref="_printModal" ShowSpinner="false">
    <Body>
        <PlotterView @key="_plotterViewKey" class="plot-view" ExternalCssScope="@CssScope" />
    </Body>
</CancelModal>

<ModalWrapper @ref="_doPrint" class="app-modal" Context="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">
                Print the pattern
            </h5>
        </div>
        <div class="modal-body">
            Do you really want to print the pattern?
        </div>
        <div class="modal-footer">
            <button @onclick="() => DoStep(force: true)" class="btn btn-danger">Print!</button>
            <button @onclick="() => modal.Close()" class="btn btn-secondary">Stay at this step</button>
        </div>
    </div>
</ModalWrapper>

<ModalWrapper @ref="_enterCalibrationDataModal" class="app-modal" Context="modal" ExternalCssScope="@CssScope" Opened="CalibrationDataModalOpened">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">
                Enter calibration data
            </h5>
        </div>
        <div class="modal-body">
            <p>
                Paste the JSON calibration data here:
            </p>
            <textarea @ref="_calibrationText" spellcheck="false" autocorrect="off" autocapitalize="off" class="calibration-text" rows="14" @bind="CalibrationJson" @bind:event="oninput" placeholder="Paste or leave blank to clear any values you have set previously and fall back to internal defaults." />
        </div>
        <div class="modal-footer">
            @if (_calibrationJsonValid)
            {
                <button @onclick="() => EnterCalibrationData(true)" class="btn btn-danger">Set the calibration data</button>
            }
            else
            {
                <button @onclick="() => {}" class="btn btn-danger disabled">Calibration data is invalid</button>
            }
            <button @onclick="() => modal.Close()" class="btn btn-secondary">I have changed my mind</button>
        </div>
    </div>
</ModalWrapper>

<PrinterPageTitle Image="/_content/SLS4All.Compact.AppCore/ui/img/main-new-job.png" IsFullPage="true" />

<div class="container">
    <div class="jumbotron pt-4 pb-2">
        @switch (StepIndex)
        {
            case Step.Selection:
                <h2>
                    Galvo calibration
                </h2>
                <hr class="my-3">
                <p>
                    This wizard will guide you trough calibration of the printer X/Y precision.
                    This generally needs to be done once after you install or move the optical components, like the laser, lens or galvo holder.
                </p>
                <p>
                    <a class="btn btn-theme btn-lg w-50" @onclick="() => { _mode = Mode.CalibrationPattern; return DoStep(); }">Print the calibration pattern</a>
                    This will print a pattern on thermo paper that can be scanned and processed in computer to produce a calibration data you can paste here.
                    This will compensate any innacurracies in the optical and mechanical parts of this 3D printer.
                </p>
                <p>
                    <a class="btn btn-theme btn-lg w-50" @onclick="() => EnterCalibrationData()">Enter calibration data</a>
                    This will allow you to paste the calibration data you have produced on a computer from the calibration pattern.
                </p>
                <p>
                    <a class="btn btn-theme btn-lg w-50" @onclick="() => { _mode = Mode.ScalingPattern; return DoStep(); }">Print the scaling pattern</a>
                    This will print a pattern on thermo paper that you can easily measure yourself to fine tune the X and Y scale.
                </p>
                break;
            case Step.Homing:
                <h2>
                    Printer homing
                </h2>
                <hr class="my-3">
                <p>
                    Printer will now home both Z axes and recoater. Please ensure that the printer is free of any powder and the both beds and recoater can move unrestricted.
                </p>
                <hr class="my-3">
                <p class="lead">
                    <a class="btn btn-primary btn-lg" role="button" @onclick="() => DoStep()">Home the printer...</a>
                    @if (MainLayout!.IsDeveloperMode)
                    {
                        <a class="btn btn-danger btn-lg" role="button" @onclick="() => DoStep(skip: true)">Skip step...</a>
                    }
                </p>
                break;
            case Step.Preparation:
                <h2>
                    Inserting the calibration tool and thermo paper
                </h2>
                <hr class="my-3">
                <p>
                    You can now prepare the 3D printed calibration tool and thermo paper. The paper should be cut and placed on top of the calibration tool to precisely match the outside
                    edges. Please note that the print bed should be cool, to avoid the thermo paper to change its color by just being inside of the printer.
                </p>
                <p>
                    Please ensure that the <b>thermal coated side of paper points upwards</b> (i.e. it is not facing to the tool). You can identify it by quickly dragging your fingernail over the
                    paper, it should leave a slight black line.
                </p>
                <p>
                    Easiest way of preparing the tool and paper is to use a paper glue stick and apply it <b>very slightly</b> to the top surface of the calibration tool. 
                    You can than stick a larger piece of thermo paper on it. You then use a box cutter to nicely trace and remove the paper that exceeds the calibration tool 
                    (but keep the inner "holes").
                </p>
                <p>
                    Place the calibration tool with the paper side pointing upwards over the print bed (the right chamber) and center it precisely over the print chamber bed/hole.
                </p>
                <hr class="my-3">
                <p class="lead">
                    <a class="btn btn-primary btn-lg" role="button" @onclick="() => DoStep()">Continue</a>
                </p>
                break;
            case Step.ReadyToPrint:
                <h2>
                    Ready to print
                </h2>
                <hr class="my-3">
                <p>
                    Printer is now ready to print the pattern on thermo paper.
                </p>
                @if (_mode == Mode.ScalingPattern)
                {
                    <p>
                        Folowing projection scale will be used for the <i>scaling pattern</i>. X scale: <ValueEditor Title="X scale" @bind-Value="Values.ProjectionScaleX" class="w-auto" Unit="%" />, Y scale: <ValueEditor Title="Y scale" @bind-Value="Values.ProjectionScaleY" class="w-auto" Unit="%" />
                    </p>
                }
                @if (!isSafeButtonOn)
                {
                    <p class="pt-3">
                        <span class="badge badge-warning text-wrap">
                            Please close the <i>Printer Lid</i>, put on the <i>Over Powder Bin</i> and turn on the <i>Laser Safety Key</i> before continuing. Remember to turn off the <i>Laser Safety Key</i> while not printing!
                        </span>
                    </p>
                }
                <hr class="my-3">
                <p class="lead">
                    @if (isSafeButtonOn)
                    {
                        <a class="btn btn-primary btn-lg" role="button" @onclick="() => DoStep()">Print the pattern...</a>
                    }
                    else
                    {
                        <a class="btn btn-primary btn-lg" role="button" @onclick="() => MainLayout!.IsDeveloperMode ? DoStep() : Task.CompletedTask">Waiting for laser safety...</a>
                    }
                </p>
                break;
            case Step.Done:
                <h2>
                    The pattern has been printed
                </h2>
                <hr class="my-3">
                <p>
                    You can now remove the calibration tool and the thermo paper from the printer. If you used a glue stick to flatten the thermo paper,
                    you should remove the thermo paper from the tool now, otherwise it may tear if you remove it later. 
                    You can also wash away the glue from the tool with warm water.
                </p>
                @if (_mode == Mode.CalibrationPattern)
                {
                    <p>
                        It is perfectly ok if the corners of the pattern are slightly outside the thermo paper. However the pattern should be more or less centered on it.
                        If you measure the pattern size from the <b>center of the paper</b>, the whole printable area you wish to use while 3D printing should be covered.
                        If it does not, make sure you have mechanically centered the galvo motors.
                    </p>
                }
                else
                {
                    <p>
                        The scaling pattern should be centered on the paper/tool. The whole printable area you wish to use while 3D printing should be covered.
                        If it does not, make sure you have mechanically centered the galvo motors and entered the calibration data.
                    </p>
                    <p>
                        If you notice that the thermal paper is not exactly flat and it has bent while printing, even a litle, the pattern might be deformed.
                        If you suspect that is the case, try printing another pattern first before making adjustments.
                    </p>
                }
                <hr class="my-3">
                <p class="lead">
                    <a class="btn btn-primary btn-lg" role="button" @onclick="() => DoStep()">Done!</a>
                    <a class="btn btn-secondary btn-lg" role="button" @onclick="() => DoStep(nextStep: Step.ReadyToPrint)">Print again...</a>
                </p>
                break;
        }
    </div>
</div>


@code {
    public enum Step
    {
        NotSet = 0,
        Selection,
        Homing,
        Preparation,
        ReadyToPrint,
        Done,
    }

    private enum Mode
    {
        NotSet = 0,
        CalibrationPattern,
        ScalingPattern,
    }

    public class ValuesContainer
    {
        public decimal ProjectionScaleX { get; set; } = 100;
        public decimal ProjectionScaleY { get; set; } = 100;
    }

    public const string SelfPath = "/wizard/galvo-calibration";
    private const string CssScope = "b-calibration-wizard";
    private ModalWrapper? _doPrint, _enterCalibrationDataModal;
    private CancelModal? _printModal;
    private readonly object _plotterViewKey = new object();
    private string _calibrationJson = "";
    private bool _calibrationJsonValid = false;
    private Mode _mode;
    private ElementReference _calibrationText;

    private string CalibrationJson
    {
        get => _calibrationJson;
        set
        {
            if (_calibrationJson == value)
                return;
            _calibrationJson = value;
            _calibrationJsonValid = Projection.ValidateJsonConfig(value);
        }
    }

    protected override void OnInitialized()
    {
        StepIndex = Step.Selection;
        base.OnInitialized();
    }

    private async Task DoStep(bool skip = false, bool force = false, Step? nextStep = null)
    {
        switch (StepIndex)
        {
            case Step.Selection:
                await Advance();
                break;
            case Step.Homing:
                if (!skip)
                    await HomeAndSetBeds();
                await Advance();
                break;
            case Step.Preparation:
                await Advance();
                break;
            case Step.ReadyToPrint:
                if (!force)
                    await _doPrint!.Show();
                else
                {
                    await _doPrint!.Close();
                    if (await PrintPattern())
                        await Advance();
                }
                break;
            case Step.Done:
                if (nextStep != null)
                    StepIndex = nextStep.Value;
                else
                    await Advance();
                break;
        }
    }

    private async Task Advance()
    {
        if (StepIndex == Step.Done)
        {
            ToastProvider.Show(new ToastMessage
                {
                    Key = this,
                    Type = ToastMessageType.Information,
                    HeaderText = "Success",
                    BodyText = "Wizard has completed successfully",
                    Silent = true, // user is interacting, no beeping is necessary
                });
            NavigateAfterFinished();
            return;
        }
        StepIndex++;
        await Task.CompletedTask;
    }

    private async Task HomeAndSetBeds()
    {
        var options = Options.CurrentValue;
        await CancelModal.Execute(async cancel =>
            {
                await LayerClient.HomeBedsAndRecoater(0, cancel: cancel);
                await MovementClient.MoveAux(MovementAxis.Z2, new MoveAuxItem
                    {
                        Relative = false,
                        Value = options.Z2MoveDepth,
                    },
                    cancel: cancel);
                await MovementClient.FinishMovement(cancel: cancel);
            },
            titleText: "Please wait",
            bodyText: "Homing beds...",
            cancelText: "Cancel",
            errorToastHeaderText: "Error homing beds");
    }


    private async Task<PrinterPowerSettings?> GetPrinterPowerSettings()
    {
        var context = ValidationContextFactory.CreateContext();
        var powerSettings = SettingsStorage.GetPowerSettingsDefaults();
        powerSettings.MergeFrom(SettingsStorage.GetPowerSettings());
        var powerSettingsValidation = await powerSettings.Validate(context);
        if (!powerSettingsValidation!.IsValid)
        {
            ToastProvider.Show(new ToastMessage
                {
                    HeaderText = "Invalid settings",
                    BodyText = "Printer power settings contain errors",
                    Type = ToastMessageType.Error,
                    Key = this,
                });
            return null;
        }
        return powerSettings;
    }

    private async Task<bool> PrintPattern()
    {
        var options = Options.CurrentValue;
        var res = await _printModal!.Execute<bool>(async cancel =>
            {
                System.Diagnostics.Stopwatch? watch = null;
                PrintHelper2D? helper = null;
                PrinterStream? closedScript = null;

                try
                {
                    var printerSettings = await GetPrinterPowerSettings();
                    if (printerSettings == null)
                        return false;

                    StateHasChanged();
                    await Task.Yield();

                    var defaultSpeedA = options.DefaultSpeedA * options.DefaultSpeedARelativeLaserWattage / printerSettings.LaserWattage!.Value;
                    switch (_mode)
                    {
                        case Mode.CalibrationPattern:
                            {
                                var setup = new PrintHelper2D.Setup
                                {
                                    CenterX = (double)Projection.Center.x,
                                    CenterY = (double)Projection.Center.y,
                                    CalibrationRadius = (double)options.CalibrationRadius,
                                    CalibrationSteps = options.CalibrationSteps,
                                    CalibrationDensityStep = (double)options.CalibrationDensityStep,
                                    CalibrationMargin = (double)options.CalibrationMargin,
                                    Dwell = options.Dwell,
                                    Steps = options.Steps,
                                    XCorrectionFactor = 1,
                                    YCorrectionFactor = 1,
                                    DefaultSpeedA = (double)defaultSpeedA,
                                    UseDefaultSpeed = true,
                                    LaserOnFactor = (double)options.LaserOnPrecent / 100,
                                    Precision = (double)options.Precision,
                                };

                                helper = new PrintHelper2D(Movement, Projection, HotspotCalculator, Logger);
                                closedScript = async (channel, cancel) =>
                                {
                                    await helper.DrawCalibrationPattern(channel, setup, cancel);
                                    await helper.Close(channel, setup, cancel);
                                };
                                break;
                            }
                        case Mode.ScalingPattern:
                            {
                                if (Values.ProjectionScaleX <= 10 || Values.ProjectionScaleX >= 190 ||
                                    Values.ProjectionScaleY <= 10 || Values.ProjectionScaleY >= 190)
                                    throw new ApplicationException("Scale is out of range, use a value in percent");
                                var setup = new PrintHelper2D.Setup
                                    {
                                        CenterX = (double)Projection.Center.x,
                                        CenterY = (double)Projection.Center.y,
                                        Radius = (double)options.ScalingRadius,
                                        RadiusStep = (double)options.ScalingStep,
                                        Dwell = options.Dwell,
                                        Steps = options.Steps,
                                        XCorrectionFactor = (double)(Values.ProjectionScaleX / 100),
                                        YCorrectionFactor = (double)(Values.ProjectionScaleY / 100),
                                        DefaultSpeedA = (double)defaultSpeedA,
                                        UseDefaultSpeed = true,
                                        LaserOnFactor = (double)options.LaserOnPrecent / 100,
                                        Precision = (double)options.Precision,
                                    };

                                helper = new PrintHelper2D(Movement, Projection, HotspotCalculator, Logger);
                                closedScript = async (channel, cancel) =>
                                {
                                    await helper.DrawScalingPattern(channel, setup, cancel);
                                    await helper.Close(channel, setup, cancel);
                                };
                                break;
                            }
                    }

                    if (closedScript != null)
                    {
                        Plotter.Clear();
                        Logger.LogInformation($"Starting to print pattern");
                        watch = System.Diagnostics.Stopwatch.StartNew();
                        try
                        {
                            await using (await SafetySession.BeginSafetySession(cancel))
                            {
                                await Movement.HomeXY(cancel: cancel);
                                await PrinterClient.Stream(closedScript, synchronousScriptExecution: false, hidden: true /* hide! */, cancel: cancel); // NOTE: hide! Otherwise GC will go awry from all the GCode strings
                                await Movement.FinishMovement(cancel: cancel);
                            }
                        }
                        catch
                        {
                            // finish movement, in case user restarts (many commands are queued)
                            try
                            {
                                await Movement.FinishMovement();
                            }
                            catch
                            {
                            }
                            throw;
                        }
                        watch.Stop();
                        Plotter.Clear();
                        Logger.LogInformation($"Printed pattern in {watch.Elapsed}");
                    }
                }
                catch (Exception ex)
                {
                    await EmergencyHelper.CreateAndCall(x => x.EmergencyPowerOffLaser());
                    ToastProvider.Show(new ToastMessage
                        {
                            Type = ToastMessageType.Error,
                            HeaderText = "Error while printing pattern",
                            BodyText = ex.Message,
                            Key = this,
                            Exception = ex,
                        });
                    return false;
                }
                StateHasChanged();
                return true;
            },
            false,
            titleText: "Printing pattern...",
            cancelText: "Cancel",
            errorToastHeaderText: "Error printing pattern");
        return res;
    }

    private async Task EnterCalibrationData(bool fromModal = false)
    {
        if (!fromModal)
        {
            _calibrationJson = await Projection.GetJsonConfig() ?? "";
            _calibrationJsonValid = true;
            await _enterCalibrationDataModal!.Show();
        }
        else
        {
            if (await Projection.SetJsonConfig(_calibrationJson))
            {
                await _enterCalibrationDataModal!.Close();
                ToastProvider.Show(new ToastMessage
                    {
                        Key = this,
                        Type = ToastMessageType.Information,
                        HeaderText = "Success",
                        BodyText = "Calibration data has been successfully set. You will need to restart the software to apply the changes.",
                        Silent = true, // user is interacting, no beeping is necessary
                        TargetUri = ShutdownPage.SelfPath,
                    });
                NavigateAfterFinished();
            }
        }
    }

    private async Task CalibrationDataModalOpened()
    {
        try
        {
            await _calibrationText.TrySelectAll(JSRuntime);
            await _calibrationText.TryFocusAsync();
        }
        catch
        {
            // swallow
        }
    }
}
